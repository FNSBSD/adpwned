use std::fs::File;
use std::io::{BufRead, BufReader, Seek, SeekFrom};

/// Find `hash` in a file of "pwned" password hashes
///
/// This function performs a binary search to perform the search in `O(log(n))` complexity,
/// utilizing [`Seek`] to scan through the file without reading the entire contents into memory.
///
/// `find_hash` will return an [`Option`] containing the number of times the hashed password has
/// been seen in breaches, or `None` if it has not been seen.
///
/// # Authorship
///
/// The core logic of this function was generated by ChatGPT, though it has since been fixed,
/// optimized, and specialized to this specific purpose by myself.
fn find_hash<R: BufRead + Seek>(reader: &mut R, hash: &str) -> Option<usize> {
    let mut left = 0;
    let mut right = reader.seek(SeekFrom::End(0)).unwrap() as usize;

    let target = hash.to_string();
    let mut line = String::new();

    while left <= right {
        let mid = left + (right - left) / 2;
        reader.seek(SeekFrom::Start(mid as u64)).unwrap();
        reader.read_line(&mut line).unwrap();
        line.clear();
        reader.read_line(&mut line).unwrap();

        let split_line: Vec<_> = line.trim().split(':').collect();

        match split_line[0].cmp(&target) {
            std::cmp::Ordering::Equal => return Some(split_line[1].parse().unwrap()),
            std::cmp::Ordering::Less => left = mid + 1,
            std::cmp::Ordering::Greater => right = mid - 1,
        }
    }

    None
}


fn main() {
    let file = File::open("../pwned-passwords-ntlm-ordered-by-hash-v8.txt").expect("Unable to open file");
    let mut reader = BufReader::new(file);

    let foundit = find_hash(&mut reader, "FFFFFFBB9CF58E60AE819BE9908AE298");
    println!("Did we find it? {}", foundit.unwrap_or(0));

    let foundit = find_hash(&mut reader, "FFFFFFAE407410119333ADA141BBF082");
    println!("Did we find it? {}", foundit.unwrap_or(0));

    let foundit = find_hash(&mut reader, "FFFFFFAE407410119333ADA141BBF083");
    println!("Did we find it? {}", foundit.unwrap_or(0));
}
